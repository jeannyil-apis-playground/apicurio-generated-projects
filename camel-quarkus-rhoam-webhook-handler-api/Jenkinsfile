#!groovy

pipeline {
    agent {
        node {
            label 'maven'
        }
    }

    parameters{
        string (defaultValue: 'image-registry.openshift-image-registry.svc:5000', name:'IMAGE_REGISTRY', description:'container image registry')
        string (defaultValue: 'rh-dev', name:'IMAGE_NAMESPACE', description:'namespace where image is deployed')
        string (defaultValue: 'rh-dev', name:'DEV_PROJECT', description:'build or development project')
        string (defaultValue: 'rh-test', name:'TEST_PROJECT', description:'Test project')
        string (defaultValue: 'rh-prod', name:'PROD_PROJECT', description:'Production project')
        string (defaultValue: 'https://github.com/jeannyil-apis-playground/apicurio-generated-projects.git', name:'GIT_REPO', description:'Git source')
        string (defaultValue: 'main', name:'GIT_BRANCH', description:'Git branch in the source git')
        booleanParam (defaultValue: false, name:'SELECT_DEPLOY_TO_PROD', description:'Approval to deploy to Production (default: no deployment to production)')
    }

    environment {
        MODULE_NAME = 'camel-quarkus-rhoam-webhook-handler-api'
    }

    stages {

        stage ('source') {
            steps {
                git url: params.GIT_REPO, branch: params.GIT_BRANCH
            }
        }

        stage('Build Service') {
            when {
                expression {
                    params.SELECT_DEPLOY_TO_PROD == false
                }
            }
            steps {
                echo "Building.. ${MODULE_NAME} "
                build(env.MODULE_NAME)

                echo "Deploying ${MODULE_NAME} to ${DEV_PROJECT}"
                deploy(env.MODULE_NAME, params.DEV_PROJECT)
            }
        }

        stage('Dev-Env smoke-test') {
            when {
                expression {
                    params.SELECT_DEPLOY_TO_PROD == false
                }
            }
            steps {
                script {

                    echo "Waiting for deployment to complete prior starting smoke testing"
                    sleep 60
                    retry(5) {
                        serviceName = 'camel-quarkus-rhoam-webhook-handler-api'
                        smokeTestUriOperation = '/webhook/amqpbridge'
                        makeGetRequest("http://${serviceName}.${DEV_PROJECT}.svc:8080${smokeTestUriOperation}")
                    }
                }
            }
        }

        stage('Pushing to Test') {
            when {
                expression {
                    params.SELECT_DEPLOY_TO_PROD == false
                }
            }
            environment {
                srcTag = '1.0.0'
                destTag = '1.0.0-promoteTest'
            }
            steps {
                echo "Deploy ${MODULE_NAME} to ${TEST_PROJECT} "
                promoteServiceSetup(env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, env.destTag, params.TEST_PROJECT)
                promoteService(params.IMAGE_NAMESPACE, params.TEST_PROJECT,env.MODULE_NAME, env.srcTag, env.destTag)
            }
        }

        stage('Test-Env smoke-test') {
            when {
                expression {
                    params.SELECT_DEPLOY_TO_PROD == false
                }
            }
            steps {
                script {
                    retry(5) {
                        serviceName = 'camel-quarkus-rhoam-webhook-handler-api'
                        smokeTestUriOperation = '/webhook/amqpbridge'
                        makeGetRequest("http://${serviceName}.${DEV_PROJECT}.svc:8080${smokeTestUriOperation}")
                    }
                }
            }
        }

        stage('Wait for user to select module to push to production.') {
            when {
                expression {
                    params.SELECT_DEPLOY_TO_PROD == true
                }
            }
            steps {
                script {
                    try {
                        timeout (time:2, unit:'HOURS') {
                            env.userProdApproval = input(id: 'userInput', message: "Do you approve this build to promote to production?")
                            env.userProdApproval = 'Approved'
                        }
                    } catch (exception) {
                        env.userProdApproval='---'
                    }

                    println("User approval to production " + env.userProdApproval);
                }
            }
        }

        stage('Pushing to Prod') {
            environment {
                srcTag = '1.0.0'
                destTag = '1.0.0-promoteProd'
            }
            when {
                expression {
                env.userProdApproval == 'Approved'
                }
            }
            steps {
                echo "Deploy ${MODULE_NAME} to ${PROD_PROJECT} "
                promoteServiceSetup(env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, env.destTag, params.PROD_PROJECT)
                promoteService(params.IMAGE_NAMESPACE, params.PROD_PROJECT, env.MODULE_NAME,  env.srcTag, env.destTag)
            }
        }
        
        stage('Prod-Env smoke-test') {
            when {
                expression {
                    env.userProdApproval == 'Approved'
                }
            }
            steps {
                script {
                    retry(5) {
                        serviceName = 'camel-quarkus-rhoam-webhook-handler-api'
                        smokeTestUriOperation = '/webhook/amqpbridge'
                        makeGetRequest("http://${serviceName}.${DEV_PROJECT}.svc:8080${smokeTestUriOperation}")
                    }
                }
            }
        }
    }
}

def promoteServiceSetup(svcName, registry, imageNameSpace, tagName, projName) {
    try {
        sh """
            oc delete dc ${svcName} -n ${projName} 2> /dev/null
        """
    } catch (Exception e) {
      echo "skip dc/svc/route cleanup related exception, the resource may not exist. " + e.getMessage();
    }

    try {
        sh """
            oc delete secret quarkus-amqpbroker-connection-secret -n ${projName} 2> /dev/null
        """
    } catch (Exception e) {
      echo "skip secret cleanup related exception, the resource may not exist. " + e.getMessage();
    }

    try {
        sh """ 
            oc create secret generic quarkus-amqpbroker-connection-secret \
            --from-literal=quarkus.qpid-jms.url="amqps://amq-ssl-broker-amqp-0-svc.amq7-broker-cluster.svc:5672?transport.trustAll=true&transport.verifyHost=false&amqp.idleTimeout=120000" \
            --from-literal=quarkus.qpid-jms.username="amq-user" \
            --from-literal=quarkus.qpid-jms.password="P@ssw0rd" -n ${projName} 2> /dev/null
        """
    } catch (Exception e) {
      echo "skip secret creation related exception, the resource may already exist. " + e.getMessage();
    }

    try {
        sh """ 
            echo '
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: camel-quarkus-rhoam-webhook-handler-api
    app.kubernetes.io/version: 1.0.0
    app.openshift.io/runtime: quarkus
  name: view-secrets
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: camel-quarkus-rhoam-webhook-handler-api
    app.kubernetes.io/version: 1.0.0
    app.openshift.io/runtime: quarkus
  name: default:view
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: view
subjects:
- kind: ServiceAccount
  name: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: camel-quarkus-rhoam-webhook-handler-api
    app.kubernetes.io/version: 1.0.0
    app.openshift.io/runtime: quarkus
  name: default:view-secrets
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: view-secrets
subjects:
- kind: ServiceAccount
  name: default
' | oc create -n ${projName} -f -  2> /dev/null
        """
    } catch (Exception e) {
      echo "skip role bindings creation related exception, the resources may already exist. " + e.getMessage();
    }
    
    try {
        sh """ 
            oc create dc ${svcName} --image=${registry}/${imageNameSpace}/${svcName}:${tagName} -n ${projName} 2> /dev/null 
            oc label -n ${projName} dc/${svcName} app.openshift.io/runtime=quarkus app.kubernetes.io/name=${svcName} app.kubernetes.io/version=${tagName} 2> /dev/null
            oc rollout pause dc ${svcName} -n ${projName}  2> /dev/null
            oc patch dc ${svcName} -p '{"spec": {"template": {"spec": {"containers": [{"name": "default-container","imagePullPolicy": "Always"}]}}}}' -n ${projName} 2> /dev/null
            oc rollout resume dc ${svcName} -n ${projName}  2> /dev/null
            oc expose dc ${svcName} --type=ClusterIP  --port=8080 --protocol=TCP --target-port=8080 -n ${projName}  2> /dev/null
            oc expose svc ${svcName} --name=${svcName} -n ${projName}  2> /dev/null
        """
    } catch (Exception e) {
      echo "skip dc/svc/route creation related exception, the resource may already exist. " + e.getMessage();
    }
}
def promoteService (imageNamespace, projName, svcName, sourceTag, destinationTag) {
    script {
         openshift.withCluster() {
             openshift.withProject( imageNamespace ) {
                 echo "tagging the build for ${projName} ${sourceTag} to ${destinationTag} in ${imageNamespace} "
                 openshift.tag("${svcName}:${sourceTag}", "${svcName}:${destinationTag}")
             }
         }
         echo "deploying the ${svcName} to ${projName} "
         openshift.withCluster() {
             openshift.withProject( projName) {
                def dply = openshift.selector("dc", svcName)
                echo "waiting for ... "+ dply.rollout().status()
             }
         }
     }//script
}

def build(folderName) {
    sh """

    cd ${folderName}

    mvn package
    """

}
def deploy(folderName, projName) {
    sh """
    cd ${folderName}

    oc project ${projName}

    mvn package -Dquarkus.kubernetes.deploy=true -Dquarkus.openshift.replicas=1
    """
}

def makeGetRequest(url) {
    sh"""
        set -e -x
        curl -k -f -w "SmokeTest: %{http_code}\n" -o /dev/null -s ${url}
    """
}